import networkx as nx
import matplotlib.pyplot as plt

def visualize_pst(pst_tree):

    G = nx.DiGraph()
    
    # Add nodes and edges
    def add_nodes_edges(tree, parent=None, depth=0):
        for node, children in tree.items():
            # Add current node to graph with depth as parameter
            G.add_node(node, label=node, depth=depth)
            
            # If there is a parent, add edge from parent to current
            if parent is not None:
                G.add_edge(parent, node)
            
              # add child(?) nodes recursively
            if isinstance(children, dict):  # If children exist as a dictionary
                add_nodes_edges(children, node, depth + 1)

    # Add nodes and edges from root
    add_nodes_edges(pst_tree)
    
    # Setting color mapping based on node depth
    depth_colors = [plt.cm.viridis(0.1 * depth) for depth in range(nx.dag_longest_path_length(G) + 1)]
    node_colors = [depth_colors[G.nodes[n]['depth']] for n in G.nodes]
    
    pos = nx.spring_layout(G, seed=42, k=0.5, iterations=50)
    plt.figure(figsize=(14, 10))
    
    # Nodes: colors and sizes corresponding to depth
    nx.draw_networkx_nodes(G, pos, node_size=[3000/(1.5**G.nodes[n]['depth']) for n in G.nodes],
                           node_color=node_colors, alpha=0.9, edgecolors="black")
    
    # Edges, based on depth
    nx.draw_networkx_edges(G, pos, width=1.5, alpha=0.7, edge_color="gray", arrows=True)
    
    # Node labels
    labels = nx.get_node_attributes(G, 'label')
    nx.draw_networkx_labels(G, pos, labels, font_size=10, font_weight="bold", font_color="black")
    
    plt.title("Prediction Suffix Tree Visualization", fontsize=16)
    plt.axis("off")  # "on" if we want to see axes
    plt.show()


    # Assuming our PST is still called pst.tree and is stored as dictionary: 
visualize_pst(pst.tree)


# Aesthetic mappings:
# Color Map (viridis): color gradient mapped to node depth
# Node Sizes: Nodes higher in hierarchy are larger
# Edge Transparency: To clean up tree edges 
# Layout: spring_layout evenly spaces tree nodes
